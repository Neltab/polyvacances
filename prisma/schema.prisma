// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Vacation {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(cuid())
  startDate   DateTime
  endDate     DateTime
  location    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  events Event[]
  participants  User[]
  photos VacationPhotos[]
}

enum tag {
  TRANSPORT
  LOGISTIQUE
  NATURE
  MONUMENT
  VILLE
  VILLAGE
  ACTIVITE
  RESTAURANT
}

model Event {
  id          Int      @id @default(autoincrement())
  title        String
  description String?
  start   DateTime
  end     DateTime
  location    String
  tag        tag?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vacationId  Int
  vacation    Vacation @relation(fields: [vacationId], references: [id], onDelete: Cascade)

  eventPhotos EventPhotos[]
}

model VacationPhotos {
  id          Int      @id @default(autoincrement())
  photoUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  vacationUUID  String
  vacation    Vacation @relation(fields: [vacationUUID], references: [uuid], onDelete: Cascade)
}

model EventPhotos {
  id          Int      @id @default(autoincrement())
  photoUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  eventId     Int
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  date        DateTime
  author      String
  link        String
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vacations   Vacation[]
}